/*
                                  Trade (TM)
Juego basado en Space Trader, basado en Elite.
Se trata de viajar de planeta en planeta con una nave de carga vendiendo mercancía.
Es un juego de estrategia económica. La supervivencia y el progreso se consiguen
tomando decisiones y corriendo riesgos.
Cada planeta tiene un nombre y está a una distancia de los demás.
En cada planeta hay una cantidad de recursos de cada tipo.
Un recurso puede ser de tipo Agua, Madera, Metales, Comida, etc
En cada planeta hay un tipo de gobierno que puede ser pacifista o no
En cada planeta hay un nivel técnico que puede ser más alto o más bajo
En los planetas con alto nivel técnico se pueden vender productos tecnológicos como robots
En los planetas pacifistas es dificil vender armas
En los planetas fascistas es fácil vender armas
En los planetas en que no hay un recurso puede venderse a buen precio 
En los planetas que hay un recurso puede comprarse a buen precio
Una nave tiene bahias de carga para muchos tipos de productos
Una nave tiene que llevar el combustible necesario para viajar a una distancia
En un planeta hay noticias del tipo "Promulgada ley anti-contrabando" que se leen en el periódico
Es útil comprar el periódico al llegar para decidir qué hacer
En cada viaje te puede interceptar otro vehículo y puedes intentar escabullirte.
Si tu nave está bien equipada y es moderna será fácil escabullirse
Si te intercepta la policia y llevas carga ilegal, te la pueden quitar e incluso detenerte
Si te interceptan piratas pueden robarte e incluso matarte.
Si tu nave lleva un pod puedes escaparte con él y sobrevivir
Una nave tiene espacio para contratar tripulación, cuanto mejor sea esta mejor funcionará
Si un tripulante sabe pilotar cobra más pero se escapa facilmente de las intercepciones
Si un tripulante sabe mecánica cobra más pero reparará las averías 
*/
class Producto{
public:
	string nombre;
	int cantidad;
	int precio;
};
class Mercado{
public:
	vector<Producto>oferta;
	vector<Producto>demanda;
	int dinero;
};
class Transporte{
public:
	vector<Producto>productos;
};
class Comerciante{
public:
	Transporte transporte;
	int dinero;
};
Esta sería una forma más genérica de la historia. Así se podrían hacer juegos más variados simplemente partiendo de esta base.
Debería de haber una serie de mecanismos que actuasen como efecto de eventos. Por ejemplo, al comprar un tipo de producto, al venderlo,
al cruzarse con un transporte de un tipo determinado, al entrar en un mercado concreto, al superar una velocidad, al pasar por un sitio, etc.
Todos los eventos deverían poder crearse para cada juego de manera diferente, y sus efectos también.
Así, podríamos hacer que cuando un camión con una carga de drogas se cruce con un vehículo policial, este le multe, etc.
Se trataría de un conjunto de acciones protagonizadas por estructuras de objetos que generarían eventos, que al dispararse podrían actuar sobre
las propiedades de esos o de otros objetos. Basicamente la historia del juego. Pero tendría que ser muy facil de programar, a partir de esta base.
Definimos una acción genérica como algo así:
class Action{
	virtual void run(){
	}
};
template <typename GameType>
class AccionVender{
	void run(){
		game->comerciante->decMoney(game->producto->price);
	}
	GameType* game;
};
Veamos los actores de cada acción:
	Compra
		Comprador, Vendedor, Producto
	Venta
		Comprador, Vendedor, Producto
	Intercepción
		VehiculoInterceptor, VehiculoInterceptado, Legislación
	Averia
		Vehiculo, ServicioTecnico, Tripulación
	Credito
		Banco, Cliente
	Ingreso
		Banco, Cliente
	Partida
		Nave, Carga, Legislacion
	Llegada
		Nave, Carga, Legislación 
	Repostaje
		Nave, Cliente, Proveedor
	FluctuacionMercantil
		Mercado, Legislación, SituaciónEconomica, SituacionPolitica
	
Para aplicar el patron Visitor tenemos una jerarquía de objetos de tipo Action, que todos van a tener el método visit(Actor *)
Los actores serán todos de tipo Actor, es decir, tendrán todos el método void accept(Action *) para recibir los efectos de una acción.
Luego hay que crear las versiones concretas de cada uno.


Bien, ahora tenemos un sistema de transferencias virtual mediante un patron visitor, pero no está muy claro el uso de punteros.
Los productos no existen como tales, sino que son un tipo de objeto y una cantidad. Cuando se transfieren de un comprador a un vendedor se le
pierde la pista. Quizá sería mejor hacer objetos reales que se transfieran como punteros pero realmente, es decir, que pasen de un container a
otro y él tenga su control. Para esto se necesitaría un patrón FlightWeight, y creo que se complica la cosa.
Necesitamos tener punteros a objetos de un tipo concreto, derivado de producto, para que sea polimórfico. Pero vamos mejor a pensar en lugar de
en productos en paquetes, que llevarían el producto y la cantidad. Un paquete puede dividirse en varios más pequeños. Y varios unirse en uno.
Así sería más lógico usarlos, aunque el comparador los compara por nombre, como ahora. Veamos si funciona.
No es lo que parece, en realidad ya funcionaba así. Pueden pasarse objetos en vez de punteros, no es real. Cada objeto es un paquete del producto
y tiene una cantidad de unidades. No pasa nada.
Las ideas que necesitabamos eran:
	Que un producto concreto afecte de una forma concreta al comprador o al vendedor
	Que un tipo de comprador decida también cómo le afecta un producto concreto.
La primera idea se consigue teniendo una jerarquía de productos y haciendo que cada uno llame a los métodos que le reconocen a él. Pero eso no
sirve más que para que el transferer le reconozca, ahora es él quien decide qué hacer. A partir de ahí, habrá tipos de transferer diferentes que
decidirán los efectos que le causa cada producto. Heredando todos de un transferer genérico, que simplemente transfiere las cosas.

Así que cuando creamos un producto más, tenemos que crear en el transferer madre el reconocimiento general del mismo, es decir:
	recibirNuevo() y entregarNuevo()
Ahora, la forma como afecta ese producto a cada uno se reescribe en los transferers que nos interesen, y así a los demás no les hará nada raro.
El propio transferer tiene toda la información necesaria para realizar cualquier locura, así que ya está.

Lo que ocurre es que hay una incongruencia: la clase Producto tiene un método para transferir entre dos transferers ... un producto!
No tiene mucha lógica, llegado el momento será un obstáculo para la sencillez.
Si eliminamos eso y lo ponemos como una función global o algoritmo transferir?
Vamos a verlo.
Realmente, el proceso de la transacción o transferencia de bienes en sí no tiene ningún interés, solamente es mantenimiento. Se cobra, se paga,
se entrega la mercancía y nos vamos. La cosa sería crear una especie de sistema de evaluación o de efectos causados por cada operación. Simplemente
tendremos una lista creciente y dinámica de estos chismes, que serán elegidos por el tipo de producto adquirido y convenientemente activados.
Es decir, que puedo comprar un producto al principio sin que me dañe, y en medio del juego, entro en una zona en la que me daña o algo parecido.
Así que ese tipo de acciones o "disparadores" actuarían como efecto de adquirir un elemento de su tipo preparado, incluso podría haber dispositivos
de este tipo en otras acciones como encuentros, averías, escapes, o créditos bancarios. Bien. Parece interesante.
Veamos entonces: voy a limpiar al máximo el proceso de transferencia de productos.

Bien, simplificado al máximo. Como siempre, era mucho más simple de lo que imaginaba. Nada de mezclar cosas. Las transacciones comerciales solo
son eso. Ahora viene lo dificil: los efectos que causa obtener un producto determinado en cada trader. A ver si sale.

Un trader tiene que tener un contenedor de Effects que actuen en caso de adquirir o vender un tipo de producto. Así que deberíamos poder aplicarle
a ese conjunto un producto para que decidiese qué hacer. Aquí sí que parece que puede haber un Visitor.

